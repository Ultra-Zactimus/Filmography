// <auto-generated />
using System;
using Filmography.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Filmography.Migrations
{
    [DbContext(typeof(FilmographyContext))]
    partial class FilmographyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Filmography.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Filmography.Models.Composer", b =>
                {
                    b.Property<int>("ComposerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComposerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ComposerId");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("Filmography.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DirectorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Filmography.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MovieName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Filmography.Models.Producer", b =>
                {
                    b.Property<int>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("ComposerId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("ProducerId1")
                        .HasColumnType("int");

                    b.Property<string>("ProducerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProducerId");

                    b.HasIndex("ActorId");

                    b.HasIndex("ComposerId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ProducerId1");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("Filmography.Models.Producer", b =>
                {
                    b.HasOne("Filmography.Models.Actor", null)
                        .WithMany("JoinEntities")
                        .HasForeignKey("ActorId");

                    b.HasOne("Filmography.Models.Composer", null)
                        .WithMany("JoinEntities")
                        .HasForeignKey("ComposerId");

                    b.HasOne("Filmography.Models.Director", null)
                        .WithMany("JoinEntities")
                        .HasForeignKey("DirectorId");

                    b.HasOne("Filmography.Models.Movie", null)
                        .WithMany("JoinEntities")
                        .HasForeignKey("MovieId");

                    b.HasOne("Filmography.Models.Producer", null)
                        .WithMany("JoinEntities")
                        .HasForeignKey("ProducerId1");
                });

            modelBuilder.Entity("Filmography.Models.Actor", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Filmography.Models.Composer", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Filmography.Models.Director", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Filmography.Models.Movie", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Filmography.Models.Producer", b =>
                {
                    b.Navigation("JoinEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
